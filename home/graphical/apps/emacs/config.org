#+title: Emacs Configuration
#+author: Skiletro
#+property: header-args:emacs-lisp :tangle yes

Welcome to my Emacs configuration. It is very much a work in progress.
* Table of Contents :toc_3:
- [[#initial-configuration][Initial Configuration]]
  - [[#disclaimer][Disclaimer]]
  - [[#startup-performance][Startup Performance]]
  - [[#packages][Packages]]
  - [[#see-how-long-emacs-takes-to-load][See how long Emacs takes to load]]
  - [[#better-gc-strategy][Better GC Strategy]]
  - [[#decluttering][Decluttering]]
  - [[#miscellaneous][Miscellaneous]]
- [[#ui-configuration][UI Configuration]]
  - [[#basic-settings][Basic Settings]]
  - [[#theme-configuration][Theme Configuration]]
  - [[#font-configuration][Font Configuration]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#which-key][Which Key]]
- [[#keybindings][Keybindings]]
  - [[#generalel][General.el]]
  - [[#evil-mode][Evil Mode]]
  - [[#switch-windows][Switch Windows]]
  - [[#pressing-esc-closes-prompts-properly][Pressing ESC Closes Prompts Properly]]
- [[#help-commands][Help Commands]]
  - [[#helpful][Helpful]]
  - [[#evil-tutor][Evil Tutor]]
- [[#other-major-modes][Other Major Modes]]
  - [[#vterm][Vterm]]
  - [[#pdf-tools][PDF Tools]]
- [[#org-mode][Org Mode]]
  - [[#open-files-in-same-window][Open Files in Same Window]]
  - [[#org-modern][Org Modern]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#org-roam][Org Roam]]
  - [[#structure-templates][Structure Templates]]
  - [[#auto-tangle-configuration-files][Auto Tangle Configuration Files]]
  - [[#auto-table-of-contents][Auto Table of Contents]]
  - [[#latex-fragment-previews][LaTeX Fragment Previews]]
  - [[#drag-and-droppasting-images][Drag-and-Drop/Pasting Images]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#language-servers][Language Servers]]
    - [[#c][C++]]
    - [[#latex][LaTeX]]
    - [[#python][Python]]
  - [[#flycheck][Flycheck]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#commenting][Commenting]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#ligatures][Ligatures]]
- [[#functions][Functions]]
  - [[#new-empty-buffer][New Empty Buffer]]
  - [[#temporary-text-scaling][Temporary Text Scaling]]
  - [[#reload-emacs][Reload Emacs]]
- [[#extras][Extras]]
  - [[#runtime-performance][Runtime Performance]]

* Initial Configuration
** Disclaimer
#+begin_src emacs-lisp
  ;; NOTE: init.el is generated using config.org. Please edit that file in Emacs.
#+end_src

** Startup Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 85 1000 1000))
#+end_src

** Packages
#+begin_src emacs-lisp 
  ;; Initialise package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Init use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; Downloads packages if evaluated
#+end_src

** See how long Emacs takes to load
This is a really useful section as it prints what is being loaded and when into ~*Messages*~.

#+begin_src emacs-lisp
  (setq use-package-verbose t)
  (defun skil/display-startup-time ()
    (message "Emacs loaded %d packages in %s with %d GCs."
             (length package-activated-list)
             (format "%.3f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'skil/display-startup-time)
#+end_src

** Better GC Strategy
#+begin_src emacs-lisp
  (use-package gcmh
    :init (gcmh-mode 1))
#+end_src

** Decluttering
#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs")
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq custom-file (concat user-emacs-directory "/custom.el"))
  ;; (load-file custom-file)
#+end_src

** Miscellaneous
#+begin_src emacs-lisp
  ;; Set username and email (for Git primarily)
  (setq user-full-name "skiletro"
        user-mail-address "19377854+skiletro@users.noreply.github.com")

  ;; Fixes a little bug on Windows
  (set-language-environment "UTF-8")

  ;; Sets the backup location to the emacs cache directory (defined above)
  (setq backup-directory-alist `(("." . ,(expand-file-name "file-backups" user-emacs-directory))))
#+end_src

* UI Configuration
** Basic Settings
#+begin_src emacs-lisp
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)   ; Disable the toolbar
  (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  (menu-bar-mode -1)   ; Disable the menu bar

  (setq ring-bell-function 'ignore) ; Get rid of the bell sound

  (column-number-mode) ; Column and row number in modeline
  (global-display-line-numbers-mode t) ; Line numbers

  (pixel-scroll-precision-mode t) ; Scroll through images without it jumping everywhere

  (setq confirm-kill-emacs 'y-or-n-p) ; Confirmation on close

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Change window name to something simpler
  (setq frame-title-format "%b - Emacs")
#+end_src

** Theme Configuration
#+begin_src emacs-lisp
  ;;(add-to-list 'custom-theme-load-path "~/.emacs.d/oxocarbon/")
  ;;(use-package autothemer)
  ;;(load-theme 'oxocarbon :no-confirm)
  (use-package catppuccin-theme)
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'mocha)
#+end_src

** Font Configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Comfy" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka Comfy" :height 120)
  (set-face-attribute 'variable-pitch nil :font "Urbanist" :height 120)
#+end_src

** Dashboard
Dashboard is a packge which creates, as the name suggests, a custom dashboard that starts on load. It can show a ton of information such as recent files, and things on your agenda.

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-buffer-name "*dashboard*"
        dashboard-banner-logo-title nil ; Subtitle
        dashboard-startup-banner 'logo
        dashboard-center-content t
        dashboard-items '((recents . 5)
                          (bookmarks . 3)
                            (projects . 5)))
  (setq inhibit-startup-screen t)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

** Ivy and Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))

  ;; More completion functions for Ivy
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  ;; M-x Enhancement (adds history with no extra config)
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0))
#+end_src

* Keybindings
This configuration uses evil-mode to emulate vim keybindings. General.el is also used to add further keybindings that integrate well with which-key.

** General.el
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup))
  (general-create-definer skil/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (skil/leader-keys
    "b"  '(:which-key "buffer")
    "b." '(counsel-switch-buffer :which-key "Switch buffer")
    "bn" '(next-buffer :which-key "Next buffer")
    "bN" '(skil/new-empty-buffer :which-key "New empty buffer")
    "bp" '(previous-buffer :which-key "Previous buffer")
    "bk" '(kill-this-buffer :which-key "Kill current buffer")
    "bs" '(save-buffer :which-key "Save current buffer")

    "f"  '(:which-key "file")
    "ff" '(find-file :which-key "Find file")

    "q"  '(:which-key "quit/kill")
    "qq" '(evil-quit :which-key "Quit Emacs"))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (evil-mode)
    (evil-set-undo-system 'undo-redo)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join))

  ;; Auto configure modes with vim bindings 
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** Switch Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :commands (ace-window))
  (global-set-key (kbd "M-o") 'ace-window)
  (skil/leader-keys
    "b," '(ace-window :which-key "Switch window"))
#+end_src

** Pressing ESC Closes Prompts Properly
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
#+end_src

* Help Commands
** Helpful
Helpful adds a lot of useful information to Emacs' ~describe-~ command buffers. 

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
  (skil/leader-keys
    "h"  '(:which-key "help")
    "hf" '(describe-function :which-key "Describe function")
    "hc" '(describe-command :which-key "Describe command")
    "hv" '(describe-variable :which-key "Describe variable")
    "hk" '(describe-key :which-key "Describe-key"))
#+end_src

** Evil Tutor
Vimtutor adapted for Evil and wrapped in a major mode

#+begin_src emacs-lisp
  (use-package evil-tutor
    :commands (evil-tutor-start))
#+end_src

* Other Major Modes
** Vterm
A fully-fledged terminal emulator. Doesn't work on Windows.

#+begin_src emacs-lisp
  (if (not (eq system-type 'windows-nt))
      (progn
        (use-package vterm
          :commands (vterm))))
#+end_src

** PDF Tools
Better PDF viewing

#+begin_src emacs-lisp
  (if (eq system-type 'gnu/linux)
      (progn
        (use-package pdf-tools)))
#+end_src

* Org Mode
Declutter this massive fuck off codeblock

#+begin_src emacs-lisp
  (use-package org
    :commands (org-capture org-agenda)
    :hook
    (org-mode . skil/org-mode-setup)
    :custom
    (org-directory "~/org/")
    (org-hide-emphasis-markers t)
    (org-return-follows-link t))

  (defun skil/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))
#+end_src

** Open Files in Same Window
#+begin_src emacs-lisp
  (setq org-link-frame-setup
        '((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file)
          (wl . wl-other-frame)))
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-hide-emphasis-markers t)
    (org-modern-table nil)
    (org-modern-tag nil)
    (org-modern-keyword nil)
    (org-modern-todo nil)
    (org-modern-block-fringe nil)
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

** Configure Babel Languages
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today)))
  (skil/leader-keys
    "nr"  '(:which-key "org-roam")
    "nri" '(org-roam-node-insert :which-key "Insert node")
    "nrf" '(org-roam-node-find :which-key "Find node"))
#+end_src

** Structure Templates
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

** Auto Tangle Configuration Files
#+begin_src emacs-lisp
  (defun skil/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'skil/org-babel-tangle-config)))
#+end_src

** Auto Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** LaTeX Fragment Previews
This is used in conjunction with the built in fragment LaTeX fragment previewer.
+ On NixOS, the package ~texlive.combined.scheme-medium~ is recommended.
+ On other distros, make sure you have the ~dvipng~, ~dvisvgm~ (*Recommended*), or ~convert~ commands installed

This package automatically toggles previews on and off when you have the cursor over them.

#+begin_src emacs-lisp
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

This block moves the place being used to store LaTeX previews to the emacs cache directory (defined earlier), as well as changes the LaTeX previews to use ~svg~ instead of ~png~. 

#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory (concat user-emacs-directory "/latex-images"))
  ;; (setq org-preview-latex-default-process 'dvisvgm)
  (setq org-preview-latex-default-process 'dvipng) ; Bug with dvisvmg at the moment where text wrapped in \{text} isn't being rendered correctly.  
#+end_src

** Drag-and-Drop/Pasting Images
#+begin_quote
This extension facilitates moving images from point A to point B.
Point A (the source) can be:
+ An image inside your browser that you can drag to Emacs.
+ An image on your file system that you can drag to Emacs.
+ A local or remote image address in kill-ring. Use the ~org-download-yank~ command for this. Remember that you can use "0 w" in =dired= to get an address.
+ A screenshot taken using ~gnome-screenshot~, ~scrot~, ~gm~, ~xclip~ (on Linux), ~screencapture~ (on OS X) or, ~imagemagick/convert~ (on Windows). Use the ~org-download-screenshot~ command for this. Customize the backend with org-download-screenshot-method.
#+end_quote

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :config
      (setq-default org-download-image-dir "./_assets") 
    :hook (dired-mode-hook . org-download-enable))
#+end_src

* Development
** Languages
*** Language Servers
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :config (lsp-enable-which-key-integration t))

  (use-package company
    :after lsp-mode) ; auto complete-at-point
  (use-package company-box ; nicer looking company mode
    :hook (company-mode . company-box-mode))
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
  (use-package lsp-ivy
    :after lsp)
#+end_src

*** C++
For this language, an external package is required.
+ On NixOS, add the ~ccls~ package
+ On other distros, it will be called something similar to ~ccls~.

#+begin_src emacs-lisp
  (use-package ccls
    :after lsp
    :hook (c++-mode . lsp-deferred))
#+end_src

*** LaTeX
For this language, an external package is required.
+ On NixOS, add the ~texlab~ package
+ On Windows, ~texlab~ is found in the Scoop repositories
+ On other distros, you will most likely need to use cargo to install it.

#+begin_src emacs-lisp
  (use-package lsp-latex
    :after lsp
    :hook
    (tex-mode . lsp-deferred)
    (latex-mode . lsp-deferred)
    (bibtex-mode . lsp-deferred))
#+end_src

*** Python
For this language, an external package is required.
+ On NixOS, add the ~nodePackages.pyright~ package
+ On any other distro, install by typing ~npm install --global pyright~

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :after lsp
    :hook (python-mode . lsp-deferred))
#+end_src

** Flycheck
Syntax checking, a replacement for ~flymake~

#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

** Projectile
Project Management

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
  (skil/leader-keys
    "p"  '(projectile-command-map :which-key "project"))
#+end_src

** Magit
The git porcelain! Allows for interaction with git using Emacs and its' bindings.

#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer function #'magit-display-buffer-same-window-except-diff-v1))
  (skil/leader-keys
    "g"  '(:which-key "magit")
    "gg" '(magit-status :which-key "Magit status")
    "gG" '(magit-status-here :which-key "Magit status here")
    "gR" '(magit-revert :which-key "Magit revert"))
#+end_src

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
  (skil/leader-keys
    "bc" '(evilnc-comment-or-uncomment-lines :which-key "Comment/uncomment code"))
#+end_src

** Rainbow Delimiters
Can also be referred to as rainbow brackets or rainbow parentheses, it colourises nested delimiters according to their depth

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Ligatures
This configuration snippet is from [[https://github.com/mickeynp/ligature.el/wiki#iosevka][here]] and is made for Iosevka.

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                         "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                         "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                         ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

* Functions
Here lies various miscellaneous functions that are used

** New Empty Buffer
#+begin_src emacs-lisp
  (defun skil/new-empty-buffer ()
    "Create a new empty buffer."
    (interactive)
    (let ((xbuf (generate-new-buffer "*new*")))
      (switch-to-buffer xbuf)
      (funcall initial-major-mode)
      xbuf))
#+end_src

** Temporary Text Scaling
This is similar to Doom Emacs' "Big Mode"

#+begin_src emacs-lisp
  (defvar skil/is-big nil)
  (defun skil/temp-text-scaling ()
    "Toggles temporary text scaling (a.k.a., big text mode"
    (interactive)
    (if skil/is-big
        (progn
          (text-scale-increase 0)
          (setq skil/is-big nil))
      (progn
        (text-scale-increase 2)
        (setq skil/is-big t))))
#+end_src

** Reload Emacs
#+begin_src emacs-lisp
  "Reloads Emacs init.el"
  (defun skil/reload-init-file ()
    (interactive)
    (load-file user-init-file))
#+end_src

* Extras
** Runtime Performance
Put the GC threshold back down so that GC happens more frequently once startup has completed. You make GC pauses faster by /decreasing/ the threshold. This snippet *needs* to be at the bottom of the configuration file.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
